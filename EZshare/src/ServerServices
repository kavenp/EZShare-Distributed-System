package EZShare;


import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import dao.*;

/**
 * publish service and remove service
 */
public class ServerServices {

    private ResourceStorage resStore = new ResourceStorage();

    public JSONObject publish(JSONObject command) {

        JSONObject result = new JSONObject();
        String ezserver = null;
        String[] tagArray = null;

        if (command.containsKey("resource")) {
            JSONObject resource = (JSONObject) command.get("resource");

            if (resource.containsKey("name") && resource.containsKey("description") &&
                    resource.containsKey("uri") && resource.containsKey("channel") &&
                    resource.containsKey("owner") && resource.containsKey("ezserver")
                    && resource.containsKey("tags")) {
                String name = resource.get("name").toString();
                String description = resource.get("description").toString();
                String uri = resource.get("uri").toString();
                String channel = resource.get("channel").toString();
                String owner = resource.get("owner").toString();
                if (resource.get("ezserver") != null) {
                    ezserver = resource.get("ezserver").toString();
                } else {
                    // create a new string that combine the hostname and port of server
                    // search how to combine two String

                }

                JSONArray tags = (JSONArray) resource.get("tags");
                if (tags != null) {
                    tagArray = new String[tags.size()];
                    for (int i = 0; i < tags.size(); i++) {
                        tagArray[i] = tags.get(i).toString();
                        // System.out.println(tagArray[i]);
                    }
                }


                Resource re = new Resource(name, description, tagArray, uri, channel, owner, ezserver);
                resStore.storeResource(re);
                result.put("response", "success");
            } else {
                result.put("response", "error");
                result.put("errorMessage", "missing or incorrect type for command");
            }

        } else {
            // Throw an error here..
            result.put("errorMessage", "missing or incorrect type for command");
        }
        return result;
    }


    public int remove(JSONObject command, DataOutputStream out) {
        if (command.containsKey("uri")) {
            String values = command.get("uri").toString();

            for (Resource res : resStore.getMatchingResources()) {
                if (res.getUri().equals(values)) {
                    resStore.getMatchingResources().remove(res);
                    return 1;
                }
            }
        }
        return 0;
    }
}
